Select * from songs;
Select * from events_table;

-----Join Twotables with Artist name

SELECT E.ARTIST, E.LENGTH, S.DURATION ,E.SONG, S.Title, S.SONG_ID, S.YEAR
FROM  SONGS S INNER JOIN  EVENTS_TABLE E ON E.ARTIST = S.ARTIST_NAME;


-----Join Twotables with Song name

SELECT E.ARTIST, E.LENGTH, S.DURATION
, E.SONG, S.Title, S.SONG_ID, S.YEAR
FROM EVENTS E, SONGS S
WHERE E.SONG = S.Title;


-- THE ORDER OF ARTISTS WITH THEIR LOCATIONS OCCORDING TO THE NUMBER OF USERS HEAR THEIR SONGS 

SELECT DISTINCT * FROM
(SELECT COUNT(E.USERID) OVER(PARTITION BY E.ARTIST) USERS_NUMBER,E.ARTIST, S.ARTIST_ID, 
E.LOCATION, S.ARTIST_LATITUDE, S.ARTIST_LONGITUDE
FROM EVENTS_TABLE E INNER JOIN SONGS S
ON E.ARTIST = S.ARTIST_NAME) USER_SUB_Q 
ORDER BY USERS_NUMBER DESC;

-- SONGS ID THE USERS HEAR THE MOST ORDERD FORM THE MOST ONE TO THE LOWEST AND THE ARTIST OF EACH SONG

SELECT * FROM
(
 SELECT S.SONG_ID, S.TITLE, S.ARTIST_ID, E.ARTIST, E.LENGTH, 
COUNT(USERID) OVER(PARTITION BY S.SONG_ID) USERS_NUMBER
FROM EVENTS E, SONGS S
WHERE E.SONG = S.TITLE AND E.PAGE = 'NextSong'
	) SUB_QUERY ORDER BY USERS_NUMBER DESC;


-- GET MOST PLAYED SONGS IN TOTAL SESSIONS ACCORDING TO THE NUMBER OF USERS WITH THEIR LENGHT, PAID STATUS, ARTIST NAME AND RANK 

SELECT SUB_QUERY_1.* , DENSE_RANK() OVER(ORDER BY USERS_NUMBER DESC) FROM
(SELECT DISTINCT SONG, ARTIST, LEVEL_, COUNT(USERID) OVER (PARTITION BY SONG) USERS_NUMBER
FROM EVENTS_TABLE
WHERE PAGE = 'NextSong') SUB_QUERY_1
WHERE SUB_QUERY_1.SONG IS NOT NULL ;

-- GET THE RANK OF EACH SONG IN EACH SESSION ACCORDING TO THE NUMBER OF USERS HEARD THEM IN THIS SESSION 

SELECT SUB_QUERY_2.* From
(
SELECT  DISTINCT SUB_QUERY.ID, SUB_QUERY.SONG, SUB_QUERY.USERID
, SUB_QUERY.ARTIST, SUB_QUERY.LEVEL_, DENSE_RANK()  OVER(PARTITION BY SUB_QUERY.ID ORDER BY SUB_QUERY.USERID DESC) SONG_RANK FROM
(SELECT A.ID,A.USERID, A.SONG, COUNT(A.USERID) OVER(PARTITION BY A.ID, A.SONG) USERS_NUMBER, A.ARTIST, A.LEVEL_
FROM EVENTS_TABLE A
WHERE SONG IS NOT NULL AND  PAGE = 'NextSong'
 ) SUB_QUERY) SUB_QUERY_2
 GROUP BY SUB_QUERY_2.ID, SUB_QUERY_2.SONG, SUB_QUERY_2.LEVEL_, SUB_QUERY_2.USERID, SUB_QUERY_2.ARTIST, SUB_QUERY_2.SONG_RANK
 ORDER BY SUB_QUERY_2.ID, SUB_QUERY_2.SONG_RANK;


 -- ORDER OF ARTISTIS ACCORDING TO THE SONGS THEY MADE 

SELECT SUB_QUERY.*, DENSE_RANK() OVER(ORDER BY SONGS_NUMBER DESC) FROM 
(
SELECT DISTINCT ARTIST, SONG, COUNT(SONG) OVER(PARTITION BY ARTIST) SONGS_NUMBER
FROM EVENTS_TABLE
WHERE SONG IS NOT NULL) SUB_QUERY;

-- GET THE MOST USERS CONTRIBUTE IN THE SYSTEM ACCORDING TO THE NUMBER OF SONGS THEY HEARD IN ALL SESSIONS

SELECT SUB_QUERY.*, DENSE_RANK() OVER(ORDER BY SONGS_NUMBER) USER_RANK
FROM 
(
SELECT DISTINCT ID, USERID, FIRSTNAME, GENDER, LASTNAME, SONG,
COUNT(SONG) OVER (PARTITION BY USERID) SONGS_NUMBER
FROM EVENTS_TABLE
WHERE SONG IS NOT NULL AND PAGE = 'NextSong') SUB_QUERY;

-- GET THE LONGEST SONG and SHORTEST SONG IN EACH SESSION 

SELECT SONG, ARTIST, ID, LENGTH USERID, 
FIRST_VALUE(SONG) OVER(PARTITION BY ID ORDER BY LENGTH DESC) LONGEST_SONG, 
FIRST_VALUE(SONG) OVER(PARTITION BY ID ORDER BY LENGTH) SHORTEST_SONG
FROM EVENTS_TABLE
WHERE SONG IS NOT NULL AND PAGE = 'NextSong'
ORDER BY ID;

-- ANALYSIS IF THE PROBABILITY OF EACH USER SUCCESS TO ACCESS SONG (METHOD IS 200) FROM ALL REQUESTS 


SELECT DISTINCT SUB_QUERY.USERID, SUB_QUERY.FIRSTNAME, SUB_QUERY.LASTNAME, SUB_QUERY.NUMBER_OF_TRAILS, SUB_QUERY.SUCCESSFUL_TRAILS, 
CAST(SUB_QUERY.SUCCESSFUL_TRAILS AS FLOAT) / SUB_QUERY.NUMBER_OF_TRAILS AS SUCCESSFUL_PERCENTAGE
FROM 
(
SELECT USERID, FIRSTNAME, LASTNAME
,COUNT(USERID) OVER(PARTITION BY USERID) NUMBER_OF_TRAILS
, COUNT (CASE WHEN STATUS = 200 THEN 1 END) OVER(PARTITION BY USERID) SUCCESSFUL_TRAILS 
FROM EVENTS_TABLE
WHERE SONG IS NOT NULL AND PAGE = 'NextSong' ) SUB_QUERY
ORDER BY USERID;

-- GET THE NUMBER OF SONGS PAID FOR EACH USER, FREE AND PERCENTAGE OF PAID INCOME FROM EACH USER

SELECT SUB_QUERY.USERID, SUB_QUERY.FIRSTNAME, SUB_QUERY.LASTNAME, SUB_QUERY.PAID_SONGS_NUMBER, SUB_QUERY.FREE_SONGS_NUMBER, 
CAST (SUB_QUERY.PAID_SONGS_NUMBER AS FLOAT) / (SUB_QUERY.PAID_SONGS_NUMBER + SUB_QUERY.FREE_SONGS_NUMBER) PAID_SONGS_PERCENTAGE
FROM 
(
SELECT DISTINCT USERID, FIRSTNAME, LASTNAME,
COUNT(CASE LEVEL_ WHEN 'paid' THEN 1 END) OVER(PARTITION BY USERID) PAID_SONGS_NUMBER, 
COUNT(CASE LEVEL_ WHEN 'free' THEN 1 END) OVER(PARTITION BY USERID) FREE_SONGS_NUMBER
FROM EVENTS_TABLE
WHERE SONG IS NOT NULL AND PAGE = 'NextSong') SUB_QUERY 
ORDER BY USERID;

-- HOW LONG EACH USER SPEND IN OUR WEB SITE

SELECT SUB_QUERY.USERID, DENSE_RANK() OVER(ORDER BY SUB_QUERY.LENGTH DESC) ,
SUB_QUERY.FIRSTNAME, SUB_QUERY.LASTNAME, SUB_QUERY.LENGTH
FROM 
(
SELECT DISTINCT USERID, FIRSTNAME, LASTNAME, LENGTH,
SUM(LENGTH) OVER(PARTITION BY USERID) USER_DURATION_IN_SECONDS
FROM EVENTS_TABLE
WHERE SONG IS NOT NULL AND PAGE = 'NextSong') SUB_QUERY;


